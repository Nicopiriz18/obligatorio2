/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import dominio.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Formatter;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author nicol
 */
public class VentanaConsultaPuesto extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form VentanaIngresoEntrevista
     */
    public VentanaConsultaPuesto(Sistema sis) {
        modelo = sis;
        modelo.addObserver(this);
        initComponents();
        cargarListaPuestos();
        puestoSeleccionado = null;
        posiblesPostulantes = null;
    }

    public void cargarListaPuestos() {
        listaPuestos.setListData(modelo.obtenerPuestos().toArray());
    }

    @Override
    public void update(Observable o, Object arg) {
        listaPostulantesPuesto.setListData(new Puesto[0]);
        cargarListaPuestos();
        puestoSeleccionado = null;
        posiblesPostulantes = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaPuestos = new javax.swing.JList();
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, 10, 1);
        spinnerNivel = new javax.swing.JSpinner(spinnerModel);
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        buttonConsultar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaPostulantesPuesto = new javax.swing.JList();
        buttonCancelar = new javax.swing.JButton();
        buttonExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Consulta para puesto");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Puestos:");

        listaPuestos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listaPuestos);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Nivel:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Postulantes:");

        buttonConsultar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonConsultar.setText("Consultar");
        buttonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConsultarActionPerformed(evt);
            }
        });

        listaPostulantesPuesto.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listaPostulantesPuesto);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(spinnerNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                                .addComponent(jSeparator1))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel1)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(buttonConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 420, 520);

        buttonCancelar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonCancelar.setText("Cancelar");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonCancelar);
        buttonCancelar.setBounds(170, 520, 100, 30);

        buttonExportar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonExportar.setText("Exportar");
        buttonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportarActionPerformed(evt);
            }
        });
        getContentPane().add(buttonExportar);
        buttonExportar.setBounds(280, 520, 100, 30);

        setBounds(0, 0, 431, 582);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_buttonCancelarActionPerformed

    private void buttonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConsultarActionPerformed
        Puesto seleccionado = (Puesto) listaPuestos.getSelectedValue();
        int valorSpinner = (int) spinnerNivel.getValue();

        if (seleccionado == null) {
            JOptionPane.showMessageDialog(this, "No se seleccion√≥ un puesto a consultar", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (valorSpinner < 1 || valorSpinner > 10) {
            JOptionPane.showMessageDialog(this, "El nivel debe ser un numero entre 1 y 10", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            puestoSeleccionado = seleccionado;
            Tematica[] temasPuesto = seleccionado.getTemas().toArray(new Tematica[0]);
            String formato = seleccionado.getFormato();
            //se hallan los postulantes que tienen ese nivel o mas en las tematicas elegidas
            Postulante[] postulantesAptos = modelo.postulantesPorTemaNivel(temasPuesto, valorSpinner, formato).toArray(new Postulante[0]);
            //se hallan las ultimas entrevistas de dichos postulantes, si hay alguno de esos postulantes sin entrevistas no se devuelve
            HashMap<Postulante, Integer> postsConPuntaje = modelo.ultimasEntrevistasPostulantes(postulantesAptos);
            //se crea una lista de las claves del hashmap
            List<Postulante> clavesOrdenadas = new ArrayList<>(postsConPuntaje.keySet());
            //se ordena esa lista en funcion de los puntajes (lo deja en orden creciente, por eso luego lo invertimos)
            clavesOrdenadas.sort(Comparator.comparing(postsConPuntaje::get));
            Collections.reverse(clavesOrdenadas);
            if (clavesOrdenadas.size() > 0) {
                listaPostulantesPuesto.setListData(clavesOrdenadas.toArray());
                posiblesPostulantes = clavesOrdenadas.toArray(new Postulante[0]);
            }
        }

    }//GEN-LAST:event_buttonConsultarActionPerformed

    private void buttonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportarActionPerformed
        // TODO add your handling code here:
        if (listaPostulantesPuesto.getModel().getSize() == 0 || puestoSeleccionado == null || posiblesPostulantes == null) {
            JOptionPane.showMessageDialog(this, "Datos a exportar no existentes. \nAsegurese de que existan postulantes posibles en la lista de debajo\n y que haya un puesto con la consulta realizada.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            ArchivoGrabacion arch = new ArchivoGrabacion("Cosulta.txt", false);
            arch.grabarLinea(puestoSeleccionado.getNombre());
            for (Postulante post : posiblesPostulantes) {
                arch.grabarLinea(post.getNombre() + " - " + post.getCedula() + " - " + post.getMail());
            }
            arch.cerrar();
            JOptionPane.showMessageDialog(this, "Archivo creado con exito.\n Puede encontrarlo en la misma carpeta que el programa bajo el nombre 'Consulta.txt'", "Operaci√≥n exitosa", JOptionPane.INFORMATION_MESSAGE);

        }

    }//GEN-LAST:event_buttonExportarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonConsultar;
    private javax.swing.JButton buttonExportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listaPostulantesPuesto;
    private javax.swing.JList listaPuestos;
    private javax.swing.JSpinner spinnerNivel;
    // End of variables declaration//GEN-END:variables
    private Sistema modelo;
    private Puesto puestoSeleccionado;
    private Postulante[] posiblesPostulantes;
}
